{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/android-app-테스트-adb명령어를-이용한-테스트",
    "result": {"data":{"post":{"slug":"/android-app-테스트-adb명령어를-이용한-테스트","title":"Android App 테스트- adb명령어를 이용한 테스트","date":"03.06.2019","tags":[{"name":"Android","slug":"android"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Android App 테스트- adb명령어를 이용한 테스트\",\n  \"tags\": [\"Android\"],\n  \"date\": \"2019-06-03T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uC548\\uB4DC\\uB85C\\uC774\\uB4DC \\uD14C\\uC2A4\\uD2B8\\uC5D0\\uB294 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC740 \\uBC29\\uBC95\\uC774 \\uC788\\uB2E4.\"), mdx(\"p\", null, \"1.txt\\uD30C\\uC77C\\uC744 \\uBC00\\uC5B4\\uB123\\uC5B4\\uC11C \\uC2A4\\uD06C\\uB9BD\\uD2B8\\uB300\\uB85C \\uB3D9\\uC791\\uD558\\uAC8C\\uD558\\uAE30\\n2.adb \\uBA85\\uB839\\uC5B4\\uB97C \\uD1B5\\uD55C \\uB79C\\uB364\\uD14C\\uC2A4\\uD2B8\\n3.Junit \\uD14C\\uC2A4\\uD2B8\\uB97C \\uC791\\uC131\\uD558\\uC5EC \\uC2E4\\uD589\"), mdx(\"p\", null, \"\\uC9C0\\uB09C \\uD3EC\\uC2A4\\uD2B8\\uC5D0 \\uC774\\uC5B4 adb\\uBA85\\uB839\\uC5B4\\uB97C \\uC774\\uC6A9\\uD55C \\uB79C\\uB364\\uD14C\\uC2A4\\uD2B8\\uC5D0 \\uAD00\\uD574 \\uC801\\uC5B4\\uBCF4\\uACA0\\uB2E4.\"), mdx(\"p\", null, \"adb\\uBA85\\uB839\\uC5B4\\uB97C \\uC0AC\\uC6A9\\uD558\\uB824\\uBA74 \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C Android sdk\\uAC00 \\uC124\\uCE58\\uB41C \\uACBD\\uB85C\\uC5D0\\uC11C command\\uB97C \\uC2E4\\uD589\\uD574\\uC57C\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-linux\"\n  }, \"cd /Users/usr/Library/Android/sdk\\n\")), mdx(\"p\", null, \"adb \\uC5D0\\uC11C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB294 option\\uC740 \\uB2E4\\uC74C\\uACFC \\uAC19\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-linux\"\n  }, \"global options:\\n\\n-a \\xA0 \\xA0 \\xA0 \\xA0 listen on all network interfaces, not just localhost\\n\\n-d \\xA0 \\xA0 \\xA0 \\xA0 use USB device (error if multiple devices connected)\\n\\n-e \\xA0 \\xA0 \\xA0 \\xA0 use TCP/IP device (error if multiple TCP/IP devices available)\\n\\n-s SERIAL\\xA0 use device with given serial (overrides $ANDROID_SERIAL)\\n\\n-t ID\\xA0 \\xA0 \\xA0 use device with given transport id\\n\\n-H \\xA0 \\xA0 \\xA0 \\xA0 name of adb server host [default=localhost]\\n\\n-P \\xA0 \\xA0 \\xA0 \\xA0 port of adb server [default=5037]\\n\\n-L SOCKET\\xA0 listen on given socket for adb server [default=tcp:localhost:5037]\\n\\n\\n\\ngeneral commands:\\n\\ndevices [-l] \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 list connected devices (-l for long output)\\n\\nhelp \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 show this help message\\n\\nversion\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 show version num\\n\\n\\n\\nnetworking:\\n\\nconnect HOST[:PORT]\\xA0 \\xA0 \\xA0 connect to a device via TCP/IP [default port=5555]\\n\\ndisconnect [HOST[:PORT]]\\n\\n\\xA0\\xA0 \\xA0 disconnect from given TCP/IP device [default port=5555], or all\\n\\nforward --list \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 list all forward socket connections\\n\\nforward [--no-rebind] LOCAL REMOTE\\n\\n\\xA0\\xA0 \\xA0 forward socket connection using:\\n\\n\\xA0\\xA0 \\xA0 \\xA0 tcp:<port> (<local> may be \\\"tcp:0\\\" to pick any open port)\\n\\n\\xA0\\xA0 \\xA0 \\xA0 localabstract:<unix domain socket name>\\n\\n\\xA0\\xA0 \\xA0 \\xA0 localreserved:<unix domain socket name>\\n\\n\\xA0\\xA0 \\xA0 \\xA0 localfilesystem:<unix domain socket name>\\n\\n\\xA0\\xA0 \\xA0 \\xA0 dev:<character device name>\\n\\n\\xA0\\xA0 \\xA0 \\xA0 jdwp:<process pid> (remote only)\\n\\nforward --remove LOCAL \\xA0 remove specific forward socket connection\\n\\nforward --remove-all \\xA0 \\xA0 remove all forward socket connections\\n\\nppp TTY [PARAMETER...] \\xA0 run PPP over USB\\n\\nreverse --list \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 list all reverse socket connections from device\\n\\nreverse [--no-rebind] REMOTE LOCAL\\n\\n\\xA0\\xA0 \\xA0 reverse socket connection using:\\n\\n\\xA0\\xA0 \\xA0 \\xA0 tcp:<port> (<remote> may be \\\"tcp:0\\\" to pick any open port)\\n\\n\\xA0\\xA0 \\xA0 \\xA0 localabstract:<unix domain socket name>\\n\\n\\xA0\\xA0 \\xA0 \\xA0 localreserved:<unix domain socket name>\\n\\n\\xA0\\xA0 \\xA0 \\xA0 localfilesystem:<unix domain socket name>\\n\\nreverse --remove REMOTE\\xA0 remove specific reverse socket connection\\n\\nreverse --remove-all \\xA0 \\xA0 remove all reverse socket connections from device\\n\\n\\n\\nfile transfer:\\n\\npush [--sync] LOCAL... REMOTE\\n\\n\\xA0\\xA0 \\xA0 copy local files/directories to device\\n\\n\\xA0\\xA0 \\xA0 --sync: only push files that are newer on the host than the device\\n\\npull [-a] REMOTE... LOCAL\\n\\n\\xA0\\xA0 \\xA0 copy files/dirs from device\\n\\n\\xA0\\xA0 \\xA0 -a: preserve file timestamp and mode\\n\\nsync [all|data|odm|oem|product_services|product|system|vendor]\\n\\n\\xA0\\xA0 \\xA0 sync a local build from $ANDROID_PRODUCT_OUT to the device (default all)\\n\\n\\xA0\\xA0 \\xA0 -l: list but don't copy\\n\\n\\n\\nshell:\\n\\nshell [-e ESCAPE] [-n] [-Tt] [-x] [COMMAND...]\\n\\n\\xA0\\xA0 \\xA0 run remote shell command (interactive shell if no command given)\\n\\n\\xA0\\xA0 \\xA0 -e: choose escape character, or \\\"none\\\"; default '~'\\n\\n\\xA0\\xA0 \\xA0 -n: don't read from stdin\\n\\n\\xA0\\xA0 \\xA0 -T: disable PTY allocation\\n\\n\\xA0\\xA0 \\xA0 -t: force PTY allocation\\n\\n\\xA0\\xA0 \\xA0 -x: disable remote exit codes and stdout/stderr separation\\n\\nemu COMMAND\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 run emulator console command\\n\\n\\n\\napp installation (see also `adb shell cmd package help`):\\n\\ninstall [-lrtsdg] [--instant] PACKAGE\\n\\n\\xA0\\xA0 \\xA0 push a single package to the device and install it\\n\\ninstall-multiple [-lrtsdpg] [--instant] PACKAGE...\\n\\n\\xA0\\xA0 \\xA0 push multiple APKs to the device for a single package and install them\\n\\ninstall-multi-package [-lrtsdpg] [--instant] PACKAGE...\\n\\n\\xA0\\xA0 \\xA0 push one or more packages to the device and install them atomically\\n\\n\\xA0\\xA0 \\xA0 -r: replace existing application\\n\\n\\xA0\\xA0 \\xA0 -t: allow test packages\\n\\n\\xA0\\xA0 \\xA0 -d: allow version code downgrade (debuggable packages only)\\n\\n\\xA0\\xA0 \\xA0 -p: partial application install (install-multiple only)\\n\\n\\xA0\\xA0 \\xA0 -g: grant all runtime permissions\\n\\n\\xA0\\xA0 \\xA0 --instant: cause the app to be installed as an ephemeral install app\\n\\n\\xA0\\xA0 \\xA0 --no-streaming: always push APK to device and invoke Package Manager as separate steps\\n\\n\\xA0\\xA0 \\xA0 --streaming: force streaming APK directly into Package Manager\\n\\n\\xA0\\xA0 \\xA0 --fastdeploy: use fast deploy\\n\\n\\xA0\\xA0 \\xA0 --no-fastdeploy: prevent use of fast deploy\\n\\n\\xA0\\xA0 \\xA0 --force-agent: force update of deployment agent when using fast deploy\\n\\n\\xA0\\xA0 \\xA0 --date-check-agent: update deployment agent when local version is newer and using fast deploy\\n\\n\\xA0\\xA0 \\xA0 --version-check-agent: update deployment agent when local version has different version code and using fast deploy\\n\\n\\xA0\\xA0 \\xA0 --local-agent: locate agent files from local source build (instead of SDK location)\\n\\nuninstall [-k] PACKAGE\\n\\n\\xA0\\xA0 \\xA0 remove this app package from the device\\n\\n\\xA0\\xA0 \\xA0 '-k': keep the data and cache directories\\n\\n\\n\\nbackup/restore:\\n\\n\\xA0\\xA0 to show usage run \\\"adb shell bu help\\\"\\n\\n\\n\\ndebugging:\\n\\nbugreport [PATH]\\n\\n\\xA0\\xA0 \\xA0 write bugreport to given PATH [default=bugreport.zip];\\n\\n\\xA0\\xA0 \\xA0 if PATH is a directory, the bug report is saved in that directory.\\n\\n\\xA0\\xA0 \\xA0 devices that don't support zipped bug reports output to stdout.\\n\\njdwp \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 list pids of processes hosting a JDWP transport\\n\\nlogcat \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 show device log (logcat --help for more)\\n\\n\\n\\nsecurity:\\n\\ndisable-verity \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 disable dm-verity checking on userdebug builds\\n\\nenable-verity\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 re-enable dm-verity checking on userdebug builds\\n\\nkeygen FILE\\n\\n\\xA0\\xA0 \\xA0 generate adb public/private key; private key stored in FILE,\\n\\n\\n\\nscripting:\\n\\nwait-for[-TRANSPORT]-STATE\\n\\n\\xA0\\xA0 \\xA0 wait for device to be in the given state\\n\\n\\xA0\\xA0 \\xA0 State: device, recovery, sideload, or bootloader\\n\\n\\xA0\\xA0 \\xA0 Transport: usb, local, or any [default=any]\\n\\nget-state\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 print offline | bootloader | device\\n\\nget-serialno \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 print <serial-number>\\n\\nget-devpath\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 print <device-path>\\n\\nremount [-R]\\n\\n\\xA0 \\xA0 \\xA0 remount partitions read-write. if a reboot is required, -R will\\n\\n\\xA0 \\xA0 \\xA0 will automatically reboot the device.\\n\\nreboot [bootloader|recovery|sideload|sideload-auto-reboot]\\n\\n\\xA0\\xA0 \\xA0 reboot the device; defaults to booting system image but\\n\\n\\xA0\\xA0 \\xA0 supports bootloader and recovery too. sideload reboots\\n\\n\\xA0\\xA0 \\xA0 into recovery and automatically starts sideload mode,\\n\\n\\xA0\\xA0 \\xA0 sideload-auto-reboot is the same but reboots after sideloading.\\n\\nsideload OTAPACKAGE\\xA0 \\xA0 \\xA0 sideload the given full OTA package\\n\\nroot \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 restart adbd with root permissions\\n\\nunroot \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 restart adbd without root permissions\\n\\nusb\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 restart adbd listening on USB\\n\\ntcpip PORT \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 restart adbd listening on TCP on PORT\\n\\n\\n\\ninternal debugging:\\n\\nstart-server \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 ensure that there is a server running\\n\\nkill-server\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 kill the server if it is running\\n\\nreconnect\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 kick connection from host side to force reconnect\\n\\nreconnect device \\xA0 \\xA0 \\xA0 \\xA0 kick connection from device side to force reconnect\\n\\nreconnect offline\\xA0 \\xA0 \\xA0 \\xA0 reset offline/unauthorized devices to force reconnect\\n\\n\\n\\nenvironment variables:\\n\\n$ADB_TRACE\\n\\n\\xA0\\xA0 \\xA0 comma-separated list of debug info to log:\\n\\n\\xA0\\xA0 \\xA0 all,adb,sockets,packets,rwx,usb,sync,sysdeps,transport,jdwp\\n\\n$ADB_VENDOR_KEYS \\xA0 \\xA0 \\xA0 \\xA0 colon-separated list of keys (files or directories)\\n\\n$ANDROID_SERIAL\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 serial number to connect to (see -s)\\n\\n$ANDROID_LOG_TAGS\\xA0 \\xA0 \\xA0 \\xA0 tags to be used by logcat (see logcat --help)\\n\")), mdx(\"p\", null, \"adb\\uB97C \\uC774\\uC6A9\\uD558\\uC5EC \\uD14C\\uC2A4\\uD2B8\\uB97C \\uC2E4\\uD589\\uD558\\uB824\\uBA74 command \\uB77C\\uC778\\uC5D0 \\uC774\\uB807\\uAC8C \\uC2E4\\uD589\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-linux\"\n  }, \"//\\uD328\\uD0A4\\uC9C0\\uB97C 10000\\uBC88 \\uD14C\\uC2A4\\uD2B8 \\uC2E4\\uD589\\nadb shell monkey -p com.example.package 10000\\n\")), mdx(\"p\", null, \"\\uC774\\uB807\\uAC8C \\uC2E4\\uD589\\uD558\\uBA74 \\uC815\\uB9D0 \\uB9D0\\uADF8\\uB300\\uB85C \\uC6D0\\uC22D\\uC774\\uAC00 \\uB204\\uB974\\uB294 \\uAC83\\uACFC \\uAC19\\uC740 monkey test\\uAC00 \\uC2E4\\uD589\\uB41C\\uB2E4.\\n\\uD130\\uCE58, \\uB4DC\\uB798\\uADF8, \\uC785\\uB825 \\uB4F1\\uB4F1\\uC774 \\uBAA8\\uB450 \\uB79C\\uB364\\uC778\\uB370 \\uC774\\uAC83\\uC758 \\uD69F\\uC218\\uB97C \\uC815\\uD574\\uC11C \\uD14C\\uC2A4\\uD2B8\\uB97C \\uD560\\uC218\\uB3C4 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-linux\"\n  }, \"--pct-touch <percent>           Touch event \\uBC1C\\uC0DD \\uBE48\\uB3C4 \\uC870\\uC808\\n--pct-motion <percent>          \\uB4DC\\uB798\\uADF8 event \\uBC1C\\uC0DD \\uBE48\\uB3C4 \\uC870\\uC808\\n--pct-trackball <percent>       \\uD2B8\\uB799\\uBCFC event \\uBC1C\\uC0DD \\uBE48\\uB3C4 \\uC870\\uC808\\n--pct-nav <percent>              Navigation event \\uBC1C\\uC0DD \\uBE48\\uB3C4 \\uC870\\uC808\\n--pct-majornav <percent>      Back, Home \\uBC84\\uD2BC\\uB4F1\\uC758 major navigation event \\uBC1C\\uC0DD \\uBE48\\uB3C4 \\uC870\\uC808\\n--pct-syskeys <percent>       System event \\uBC1C\\uC0DD \\uBE48\\uB3C4 \\uC870\\uC808 (Volume, home, end call \\uB4F1)\\n--pct-appswitch <percent>    \\uC0C8\\uB85C\\uC6B4 app. \\uC2E4\\uD589 event \\uBC1C\\uC0DD \\uBE48\\uB3C4 \\uC870\\uC808\\n--pct-anyevent <percent>      \\uAE30\\uD0C0 event \\uBC1C\\uC0DD \\uBE48\\uB3C4 \\uC870\\uC808\\n\")), mdx(\"p\", null, \"\\uC608\\uB97C \\uB4E4\\uC5B4\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-linux\"\n  }, \"adb shell monkey -p com.example.package 10000 --pct-touch 100\\n\")), mdx(\"p\", null, \"\\uC774\\uB807\\uAC8C \\uBA85\\uB839\\uD558\\uBA74 \\uD130\\uCE58\\uD69F\\uC218\\uB9CC\\uC73C\\uB85C \\uC774\\uB8E8\\uC5B4\\uC9C4 \\uD14C\\uC2A4\\uD2B8\\uB97C \\uC2E4\\uD589\\uD558\\uB294 \\uAC83\\uC774\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"안드로이드 테스트에는 다음과 같은 방법이 있다. 1.txt파일을 밀어넣어서 스크립트대로 동작하게하기\n2.adb 명령어를 통한 랜덤테스트\n3.Junit 테스트를 작성하여 실행 지난 포스트에 이어 adb명령어를 이용한 랜덤테스트에 관해 적어보겠다. adb…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/android-app-테스트-adb명령어를-이용한-테스트","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}