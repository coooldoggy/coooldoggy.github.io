{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/kotlin-표준함수",
    "result": {"data":{"post":{"slug":"/kotlin-표준함수","title":"Kotlin 표준함수","date":"12.08.2019","tags":[{"name":"Kotlin","slug":"kotlin"},{"name":"TIL","slug":"til"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Kotlin 표준함수\",\n  \"tags\": [\"Kotlin\", \"TIL\"],\n  \"date\": \"2019-08-12T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"import java.io.File\\n\\nfun main() {\\n//    val menuFile = File(\\\"menu-file.txt\\\")\\n//    menuFile.setReadable(true)\\n//    menuFile.setWritable(true)\\n//    menuFile.setExecutable(true)\\n\\n    /**\\n     * apply : \\uBC18\\uBCF5\\uB418\\uB294 \\uAC83\\uB4E4\\uC744 \\uC904\\uC774\\uAE30 \\uC704\\uD55C \\uD568\\uC218\\n     * \\uCC38\\uC870 \\uBCC0\\uC218\\uB97C \\uC0DD\\uB7B5 \\uAC00\\uB2A5 : \\uB78C\\uB2E4 \\uB0B4\\uBD80\\uC5D0\\uC11C \\uD574\\uB2F9 \\uC218\\uC2E0\\uC790\\uC5D0 \\uB300\\uD55C \\uBAA8\\uB4E0 \\uD568\\uC218 \\uD638\\uCD9C\\uC774 \\uAC00\\uB2A5\\uD558\\uB3C4\\uB85D apply\\uAC00 \\uC0AC\\uC6A9\\uBC94\\uC704\\uB97C \\uC124\\uC815\\uD574\\uC90C\\n     *\\n     */\\n    val menuFile = File(\\\"menu-file.txt\\\").apply {\\n        setReadable(true)\\n        setWritable(true)\\n        setExecutable(true)\\n    }\\n\\n    //    val firstElement = listOf(1,2,3).first()\\n    //    val firstItemSquared = firstElement * firstElement\\n\\n    val firstItemSquared = listOf(1, 2, 3).first().let {\\n        it * it\\n    }\\n\\n//    fun formatGreeting(vipGuest: String?): String{\\n//        return if (vipGuest != null){\\n//            \\\"\\uC624\\uB7AB\\uB9CC\\uC785\\uB2C8\\uB2E4, $vipGuest . \\uD14C\\uC774\\uBE14\\uC774 \\uC900\\uBE44\\uB418\\uC5B4 \\uC788\\uC73C\\uB2C8 \\uB4E4\\uC5B4\\uC624\\uC2DC\\uC8E0.\\\"\\n//        }else{\\n//            \\\"\\uC800\\uD76C \\uC220\\uC9D1\\uC5D0 \\uC624\\uC2E0 \\uAC83\\uC744 \\uD658\\uC601\\uD569\\uB2C8\\uB2E4. \\uACE7 \\uC790\\uB9AC\\uB97C \\uB9C8\\uB828\\uD574 \\uB4DC\\uB9AC\\uACA0\\uC2B5\\uB2C8\\uB2E4.\\\"\\n//        }\\n//    }\\n\\n    fun formatGreeting(vipGuest: String?): String{\\n        return vipGuest?.let {\\n            \\\"\\uC624\\uB7AB\\uB9CC\\uC785\\uB2C8\\uB2E4, $it . \\uD14C\\uC774\\uBE14\\uC774 \\uC900\\uBE44\\uB418\\uC5B4 \\uC788\\uC73C\\uB2C8 \\uB4E4\\uC5B4\\uC624\\uC2DC\\uC8E0.\\\"\\n        } ?: \\\"\\uC800\\uD76C \\uC220\\uC9D1\\uC5D0 \\uC624\\uC2E0 \\uAC83\\uC744 \\uD658\\uC601\\uD569\\uB2C8\\uB2E4. \\uACE7 \\uC790\\uB9AC\\uB97C \\uB9C8\\uB828\\uD574 \\uB4DC\\uB9AC\\uACA0\\uC2B5\\uB2C8\\uB2E4.\\\"\\n    }\\n\\n    /**\\n     * run \\uD568\\uC218 : \\uC218\\uC2E0\\uC790 \\uAC1D\\uCCB4\\uB97C \\uBC18\\uD658\\uD558\\uC9C0 \\uC54A\\uC74C\\n     * \\uB78C\\uB2E4\\uC758 \\uACB0\\uACFC true/false \\uB97C \\uBC18\\uD658\\uD568\\n     */\\n    val servesDragonBreath = menuFile.run {\\n        readText().contains(\\\"Dragon's Breath\\\")\\n    }\\n\\n    /**\\n     * run : \\uC218\\uC2E0\\uC790\\uC5D0 \\uB300\\uD55C \\uD568\\uC218 \\uCC38\\uC870 \\uC2E4\\uD589\\n     */\\n    fun nameIsLong(name: String) = name.length >= 20\\n    \\\"Madrigal\\\".run(::nameIsLong)\\n    \\\"Polarcubis, Supreme Master of NyetHack\\\".run(::nameIsLong)\\n\\n    fun playerCreateMessage(nameTooLong: Boolean): String{\\n        return if (nameTooLong){\\n            \\\"Name is Too long. Please choose another name\\\"\\n        }else{\\n            \\\"Welcome, adventurer\\\"\\n        }\\n    }\\n\\n    \\\"Polarcubis, Supreme Master of NyetHack\\\"\\n        .run(::nameIsLong)\\n        .run(::playerCreateMessage)\\n        .run(::println)\\n\\n    /**\\n     * also: run\\uACFC \\uBE44\\uC2B7\\uD558\\uC9C0\\uB9CC \\uB78C\\uB2E4\\uC758 \\uACB0\\uACFC \\uB300\\uC2E0 \\uC218\\uC2E0\\uC790 \\uAC1D\\uCCB4\\uB97C \\uBC18\\uD658\\uD568\\n     *\\n     */\\n    var fileContents: List<String>\\n    File(\\\"file.txt\\\")\\n        .also {\\n            print(it.name)\\n        }.also {\\n            fileContents = it.readLines()\\n        }\\n\\n    /**\\n     * with\\n     * \\uC218\\uC2E0\\uC790 \\uAC1D\\uCCB4\\uB97C \\uCCAB \\uBC88\\uC9F8 \\uB9E4\\uAC1C\\uBCC0\\uC218\\uC758 \\uC778\\uC790\\uB85C \\uBC1B\\uC74C\\n     */\\n    val nameTooLong = with(\\\"Polarcubis, Supreme Master of NyetHack\\\"){\\n        length >= 20\\n    }\\n\\n    /**\\n     * takeif : \\uC870\\uAC74\\uC2DD\\uC774 true\\uC774\\uBA74 \\uC218\\uC2E0\\uC790 \\uAC1D\\uCCB4 \\uBC18\\uD658 ,false\\uC774\\uBA74 null \\uBC18\\uD658\\n     * takeUnless: false\\uC774\\uBA74 \\uC218\\uC2E0\\uC790 \\uAC1D\\uCCB4 \\uBC18\\uD658 \\n     */\\n    val FileContents = File(\\\"myFile.txt\\\")\\n        .takeIf { it.canRead() && it.canWrite() }\\n        ?.readText()\\n}\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"","timeToRead":1,"banner":null}},"pageContext":{"slug":"/kotlin-표준함수","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}