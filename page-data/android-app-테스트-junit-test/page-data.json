{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/android-app-테스트-junit-test",
    "result": {"data":{"post":{"slug":"/android-app-테스트-junit-test","title":"Android App 테스트- Junit test","date":"03.06.2019","tags":[{"name":"Android","slug":"android"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Android App 테스트- Junit test\",\n  \"tags\": [\"Android\"],\n  \"date\": \"2019-06-03T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uC548\\uB4DC\\uB85C\\uC774\\uB4DC \\uD14C\\uC2A4\\uD2B8\\uC5D0\\uB294 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC740 \\uBC29\\uBC95\\uC774 \\uC788\\uB2E4.\"), mdx(\"p\", null, \"1.txt\\uD30C\\uC77C\\uC744 \\uBC00\\uC5B4\\uB123\\uC5B4\\uC11C \\uC2A4\\uD06C\\uB9BD\\uD2B8\\uB300\\uB85C \\uB3D9\\uC791\\uD558\\uAC8C\\uD558\\uAE30\\n2.adb \\uBA85\\uB839\\uC5B4\\uB97C \\uD1B5\\uD55C \\uB79C\\uB364\\uD14C\\uC2A4\\uD2B8\\n3.Junit \\uD14C\\uC2A4\\uD2B8\\uB97C \\uC791\\uC131\\uD558\\uC5EC \\uC2E4\\uD589\"), mdx(\"p\", null, \"\\uC9C0\\uB09C \\uD3EC\\uC2A4\\uD2B8\\uC5D0 \\uC774\\uC5B4 JUnit\\uC744 \\uC774\\uC6A9\\uD55C \\uD14C\\uC2A4\\uD2B8\\uC5D0 \\uAD00\\uD574 \\uC801\\uC5B4\\uBCF4\\uACA0\\uB2E4.\"), mdx(\"p\", null, \"\\uBA3C\\uC800 \\uC548\\uB4DC\\uB85C\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\uC5D0 gradle\\uC744 \\uCD94\\uAC00\\uD574\\uC900\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"dependencise{\\n    .\\n    .\\n    .\\n    testImplementation 'junit:junit:4.12'\\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\\n    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'\\n    }\\n\")), mdx(\"p\", null, \"\\uADF8\\uB9AC\\uACE0 \\uD14C\\uC2A4\\uD2B8\\uB97C \\uC791\\uC131\\uD558\\uB294\\uB370 app > java > \\uBC11\\uC5D0 (androidTest)\\uB77C\\uACE0 \\uBD99\\uC5B4\\uC788\\uB294 \\uD3F4\\uB354\\uC5D0 \\uC791\\uC131\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@RunWith(AndroidJUnit4.class)\\npublic abstract class ExampleInstrumentedTest {\\n    private UiDevice mDevice;\\n    private final String packageName = \\\"your package name\\\";\\n\\n    @Before\\n    public void initialize(){\\n        mDevice = UiDevice.getInstance(getInstrumentation());\\n        assertThat(mDevice, notNullValue());\\n\\n        try {\\n            if(!mDevice.isScreenOn()){\\n            mDevice.wakeUp();\\n            }\\n        } catch (RemoteException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n    @Test\\n    public void test() {\\n    }\\n    \\n    \\n    public String getPackageName() {\\n        return packageName;\\n    }\\n\\n    public UiDevice getmDevice() {\\n        return mDevice;\\n    }\\n\\n    public void setmDevice(UiDevice mDevice) {\\n        this.mDevice = mDevice;\\n    }\\n\")), mdx(\"p\", null, \"\\uC774 \\uCF54\\uB4DC\\uB294 \\uC5EC\\uB7EC\\uAC00\\uC9C0 \\uD14C\\uC2A4\\uD2B8\\uB97C \\uC218\\uD589\\uD558\\uAE30 \\uC704\\uD574 \\uACF5\\uD1B5\\uC73C\\uB85C \\uC0AC\\uC6A9\\uD558\\uB294 \\uCF54\\uB4DC\\uB97C super\\uD074\\uB798\\uC2A4\\uB85C \\uB9CC\\uB4E4\\uC5C8\\uB2E4.\\n\\uC774\\uB807\\uAC8C \\uD558\\uACE0 \\uC2F6\\uC9C0 \\uC54A\\uC73C\\uBA74 abstract\\uB97C \\uBE7C\\uACE0 @Test\\uC5D0 \\uD14C\\uC2A4\\uD2B8 \\uC2A4\\uD06C\\uB9BD\\uD2B8\\uB97C \\uC791\\uC131\\uD558\\uBA74 \\uB41C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public class CampLogin extends ExampleInstrumentedTest {\\n    private String errMsg;\\n    private UiDevice mDevice;\\n    private UiSelector uiSelector;\\n\\n    @Override\\n    public void initialize() {\\n        super.initialize();\\n        mDevice = super.getmDevice();\\n    }\\n\\n    @Override\\n    public void test() {\\n        try {\\n            openCamp(super.getPackageName());\\n        }catch (Exception e){\\n            //error\\uAC00 \\uC0DD\\uACBC\\uC744\\uB54C \\uD560 \\uAC83 \\uC791\\uC131\\n        }\\n\\n    }\\n\\n    private void openCamp(String packagename) {\\n        errMsg = \\\"\\uC571\\uAD6C\\uB3D9 \\uC624\\uB958\\\";\\n        Context context = InstrumentationRegistry.getContext();\\n        Intent intent = context.getPackageManager().getLaunchIntentForPackage(packagename);\\n\\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);\\n        context.startActivity(intent);\\n\\n        //\\uD328\\uD0A4\\uC9C0\\uAC00 \\uC2E4\\uD589\\uB420 \\uB54C \\uAE4C\\uC9C0 \\uAE30\\uB2E4\\uB9B0\\uB2E4.\\n        mDevice.wait(Until.hasObject(By.pkg(packagename)), 3000);\\n        \\n        //login_btn id\\uB97C \\uCC3E\\uC544 \\uD074\\uB9AD\\uD558\\uACE0 \\uC0C8\\uCC3D\\uC774 \\uC5F4\\uB9B4 \\uB54C \\uAE4C\\uC9C0 \\uAE30\\uB2E4\\uB9B0\\uB2E4.\\n        UiObject2 obj = mDevice.findObject(By.res(packagename + \\\":id/login_btn\\\"));\\n        obj.clickAndWait(Until.newWindow(), 3000);\\n        \\n        //email_address id\\uB97C \\uCC3E\\uC544 \\uD074\\uB9AD\\uD558\\uACE0 \\uD14D\\uC2A4\\uD2B8\\uB97C \\uC124\\uC815\\uD55C\\uB2E4.\\n        obj = mDevice.findObject(By.res(packagename + \\\":id/email_address\\\"));\\n        obj.click();\\n        obj.setText(\\\"\\\");\\n\\n       //back \\uBC84\\uD2BC\\uC744 \\uD074\\uB9AD\\uD55C\\uB2E4.\\n        mDevice.pressBack();\\n        \\n        //drag \\uC2E4\\uD589 (point, speed)\\n        mDevice.drag(new Point(1,1),500);\\n        \\n       \\n        obj = mDevice.findObject(By.res(packageName+\\\":id/content_layout\\\"));\\n        obj.findObjects(By.clazz(\\\"android.widget.ImageView\\\")).get(6).click();\\n\\n        obj = mDevice.findObject(By.text(\\\"\\uD655\\uC778\\\").clazz(\\\"android.widget.Button\\\"));\\n        obj.click();\\n\\n    }\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"안드로이드 테스트에는 다음과 같은 방법이 있다. 1.txt파일을 밀어넣어서 스크립트대로 동작하게하기\n2.adb 명령어를 통한 랜덤테스트\n3.Junit 테스트를 작성하여 실행 지난 포스트에 이어 JUnit…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/android-app-테스트-junit-test","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}